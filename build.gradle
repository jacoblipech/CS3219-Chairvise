buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.cloud.tools:appengine-gradle-plugin:1.3.5"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
// apply plugin: "com.google.cloud.tools.appengine"
// see https://github.com/GoogleCloudPlatform/app-gradle-plugin/issues/125
project.pluginManager.apply com.google.cloud.tools.gradle.appengine.standard.AppEngineStandardPlugin

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'sg.edu.nus.comp.viz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// remove spring-boot-starter-tomcat as we are using WAR
configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude group: 'org.apache.tomcat'
}

dependencies {
    // Spring specific dependencies
    compile("org.springframework.boot:spring-boot-starter-web")

    // JPA Data
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    // Google App Engine
    compile("com.google.appengine:appengine-api-1.0-sdk:1.9.64")
    providedCompile("javax.servlet:javax.servlet-api:3.1.0")

    // Database Access
    runtime("mysql:mysql-connector-java:8.0.12")
    runtime("com.google.cloud.sql:mysql-socket-factory:1.0.9")

    // test dependencies
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

appengine {
    run {
        port = 8080
        jvmFlags = ["-Xss2m", "-Dfile.encoding=UTF-8"]
    }
    deploy {
        String appengineWebXmlPath = "${projectDir}/src/main/webapp/WEB-INF/appengine-web.xml"
        Node appengineWebXml = new File(appengineWebXmlPath).exists() ? new XmlParser().parse(appengineWebXmlPath) : null
        project = appengineWebXml == null ? null : appengineWebXml.application.text()
        version = appengineWebXml == null ? null : appengineWebXml.version.text()
        stopPreviousVersion = false
        promote = false
    }
}

task appengineDeployAll {
    description "Deploy an App Engine application and all its extended configurations"
    group "App Engine Standard environment"
    dependsOn appengineDeploy, appengineDeployCron, appengineDeployQueue
}
